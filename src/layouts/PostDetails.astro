---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { localizePath } from "astro-i18next";
import Datetime from "@components/Datetime";
import FloatingTOC from "@components/FloatingTOC";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import i18next, { t } from "i18next";
import Giscus from "@giscus/react";
import ShareLinks from "@components/ShareLinks.astro";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  originalUrl,
  pubDatetime,
  modDatetime,
  permalink,
  collapseDepth,
  tags,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(ogImageUrl ?? `/posts/${permalink}.png`, Astro.url.origin).href;

const isFromGitHubIssue = originalUrl && originalUrl.startsWith("https://github.com/bowencool/blog/issues");
const giscusLang = i18next.language.startsWith("zh") ? "zh-CN" : "en";
// const giscusBacklink = Astro.url.origin + Astro.url.pathname.replace(/^\/zh/, "");

const layoutProps = {
  title,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};
---

<Layout {...layoutProps}>
  <!-- set title and description to en -->
  <!-- <meta
    slot="meta"
    name="giscus:backlink"
    content={giscusBacklink}
  /> -->
  <link rel="stylesheet" href="/iconfont.css" slot="meta" />
  <Header />

  <!-- <div class="progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill">
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div> -->

  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button class="focus-outline mb-2 mt-8 flex hover:opacity-75" id="go-back">
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"></path>
      </svg><span>{t("goBack")}</span>
    </button>
  </div>
  <main id="main-content">
    <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
    <Datetime pubDatetime={pubDatetime} modDatetime={modDatetime} size="lg" className="my-2" />
    <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
      <Content />
    </article>
    <nav id="floating-toc"></nav>
    <FloatingTOC client:only collapseDepth={collapseDepth} />

    <ul class="my-8">
      {
        tags.map(tag => {
          const slug = slugifyStr(tag);
          return (
            <li class="my-1 inline-block">
              <a
                href={localizePath(`/tags/${slug}`)}
                transition:name={slug}
                class="mr-2 text-sm underline decoration-dashed underline-offset-3 hover:text-skin-accent focus-visible:p-1"
              >
                #<span>{t(`tags:${slug}`)}</span>
              </a>
            </li>
          );
        })
      }
    </ul>

    <ShareLinks />

    {
      // This will show a warning of Invalid hook calling.
      import.meta.env.PROD && (
        <Giscus
          client:idle
          loading="lazy"
          id="comments"
          repo="bowencool/blog"
          repoId="MDEwOlJlcG9zaXRvcnkxMjgzNTcxMjE="
          category="Announcements"
          categoryId="DIC_kwDOB6aTAc4CchIn"
          mapping="specific"
          strict={isFromGitHubIssue ? "0" : "1"}
          term={permalink}
          reactionsEnabled="1"
          emitMetadata="0"
          theme="preferred_color_scheme"
          lang={giscusLang}
        />
      )
    }

    <button id="back-to-top" class="whitespace-nowrap bg-skin-fill py-1">
      <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
        <path d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"></path>
      </svg>
      <span>{t("backToTop")}</span>
    </button>
  </main>
  <Footer />
  <div class="progress"></div>
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
  .progress {
    @apply fixed z-10 h-1 bg-skin-accent;
    top: 0;
    left: 0;
    right: 0;
    transform-origin: 0 50%;
    animation: grow-progress 3s linear;
    animation-timeline: scroll();
  }
  @keyframes grow-progress {
    from {
      transform: scaleX(0);
    }
    to {
      transform: scaleX(1);
    }
  }
  #back-to-top {
    position: fixed;
    right: 10px;
    bottom: 10px;
    animation: back-progress 1s linear forwards;
    animation-timeline: scroll();
    animation-range: entry 0 100px;
  }
  @keyframes back-progress {
    from {
      transform: translateY(150%);
    }
    to {
      transform: translateY(0%);
    }
  }
</style>
<style is:global>
  #floating-toc {
    @apply fixed top-28;
    transform: translateX(0);
    right: calc(((100% - 48rem) / 2));
    transform: translateX(100%);
    .toc-list {
      position: relative;
      overflow: hidden;
    }
  }
  .is-active-link::before {
    @apply !bg-skin-accent;
  }
</style>
<style is:global>
  @import "tocbot/dist/tocbot.css";
</style>

<script>
  const lang = document.querySelector("html")?.getAttribute("lang") || "en";
  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  document.querySelector("#back-to-top")?.addEventListener("click", () => {
    document.body.scrollTop = 0; // For Safari
    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
  });
  document.querySelector("#go-back")?.addEventListener("click", () => {
    if (history.length === 1) {
      window.location.pathname = lang === "zh" ? "/zh" : "/";
    } else {
      history.back();
    }
  });

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      // codeBlock.setAttribute("tabindex", "0");
      copyButton.setAttribute("tabindex", "-1");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();
</script>
