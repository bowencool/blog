---
import { type CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import i18next, { t, changeLanguage } from "i18next";
import { getPostsByLang } from "@utils/getPosts";

changeLanguage("en");

export interface Props {
  post: CollectionEntry<"blog">;
}
export async function getStaticPaths() {
  const allPathes: {
    params: Record<string, string>;
    props?: {
      post: any;
    };
  }[] = [];
  const posts = await getPostsByLang(i18next.language);
  //   console.log(posts);
  posts.forEach(post => {
    // const { body, ...rest } = post;
    // console.log(rest);
    allPathes.push({
      params: { permalink: post.data.permalink || post.slug },
      props: { post },
    });
  });
  // console.log(posts.length, getPageNumbers(posts.length))
  getPageNumbers(posts.length)
    .filter(page => page > 1)
    .map(pageNum => {
      allPathes.push({
        params: { permalink: String(pageNum) },
      });
    });
  return allPathes;
  //   const postResult = posts.map(post => ({
  //       params: { permalink: post.permalink },
  //       props: { post },
  //   }));
  //   const pagePaths = getPageNumbers(posts.length).map(pageNum => ([{
  //     params: { permalink: String(pageNum) },
  //   }]));
  //   return [...postResult, ...pagePaths];
}
const { permalink } = Astro.params;
const { post } = Astro.props;
const posts = await getPostsByLang(i18next.language);
const sortedPosts = getSortedPosts(posts);
// console.log("posts [permalink]", posts.length);
const pagination = getPagination({
  posts: sortedPosts,
  page: permalink,
});
---

{post ? <PostDetails post={post} /> : <Posts {...pagination} />}
