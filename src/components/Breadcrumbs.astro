---
import i18next, { t } from "i18next";
import { localizePath } from "astro-i18next";
// Remove current url path and remove trailing slash if exists
const currentUrlPath = Astro.url.pathname
  .replace(/\/+$/, "")
  .replace(/^\/zh/, "");

// Get url array from path
// eg: /tags/tailwindcss => ['tags', 'tailwindcss']
const breadcrumbList = currentUrlPath.split("/").slice(1);

// if breadcrumb is Home > Posts > 1 <etc>
// replace Posts with Posts (page number)
breadcrumbList[0] === "posts" &&
  breadcrumbList.splice(
    0,
    2,
    `${t("posts")} (${t("page{{n}}", { n: breadcrumbList[1] || 1 })})`
  );
// breadcrumbList.splice(0, 2, `Posts (page ${breadcrumbList[1] || 1})`);

// if breadcrumb is Home > Tags > [tag] > [page] <etc>
// replace [tag] > [page] with [tag] (page number)
breadcrumbList[0] === "tags" &&
  !isNaN(Number(breadcrumbList[2])) &&
  breadcrumbList.splice(
    1,
    3,
    `${breadcrumbList[1]} ${
      Number(breadcrumbList[2]) === 1 ? "" : "(page " + breadcrumbList[2] + ")"
    }`
  );
---

<nav class="breadcrumb" aria-label="breadcrumb">
  <ul>
    <li>
      <a href={localizePath(`/`)}>{t("home")}</a>
      <span aria-hidden="true">&gt;</span>
    </li>
    {
      breadcrumbList.map((breadcrumb, index) => {
        if (index + 1 === breadcrumbList.length /* the last one */) {
          if (
            breadcrumbList[0] === "tags" &&
            breadcrumbList.length === 2 /* is a tag */
          ) {
            return (
              <li>
                <span aria-current="page">{t(`tags:${breadcrumb}`)}</span>
              </li>
            );
          }
          return (
            <li>
              <span aria-current="page">{t(breadcrumb)}</span>
            </li>
          );
        }
        return (
          <li>
            <a href={localizePath(`/${breadcrumb}`)}>{t(breadcrumb)}</a>
            <span aria-hidden="true">&gt;</span>
          </li>
        );
      })
    }
  </ul>
</nav>

<style>
  .breadcrumb {
    @apply mx-auto mb-1 mt-8 w-full max-w-3xl px-4;
    a {
      @apply capitalize opacity-70;
    }
    span {
      @apply opacity-70;
    }
    li {
      @apply inline;
      &:not(:last-child) a {
        @apply hover:opacity-100;
        /* &::after {
          content: ">";
          @apply ml-2;
        } */
      }
    }
  }
</style>
